=define_helper_functions

- parameters = @experiment.get_parameter_ids
-# parameters = %w(a b)
- parameters_labels = parameters


- #experiment_id = params[:id].to_s
- #experiment = Scalarm::Database::Model::Experiment.find_by_id(experiment_id)
- filter = {is_done: true, is_error: {'$exists'=> false}}
- fields = {fields: {result: 1}}
- result = @experiment.simulation_runs.where(filter, fields).first
- outputs=[]
- if result.blank?
  - outputs = ["No results found in completed simulation runs"]
- else
  - outputs = result.result.keys


#lindevModal.reveal-modal(data-reveal="true")
  %section#lindev_charts_form.panel.radius.analysis-chart
    %a.close-reveal-modal &#215
    %h3.subheader="Line charts with standard deviation"
    %h3 #{}
    .row
      .small-5.columns
        %label.inline="Select parameter on X"
      .small-7.columns
        %select.firstParam
          %optgroup{:label => "Parameters"}
            -parameters_labels.each do |parameter|
              %option{value:parameter} #{parameter}


          %optgroup{:label => "MoEs"}
            -outputs.each do |output|
              %option{value:output} #{output}

    .row
      .small-5.columns
        %label.inline="Select parameter on Y"
      .small-7.columns
        %select.secondParam
          %optgroup{:label => "Parameters"}
            -parameters_labels.each do |parameter|
              %option{value:parameter} #{parameter}


          %optgroup{:label => "MoEs"}
            -outputs.each do |output|
              %option{value:output} #{output}


    .row
      %ul.inline-list
        %li
          %button.radius Load chart
        %li
          %a
            %img(src="#{image_url("loading.gif")}" class="loading_chart_gif" id='busy_lindev' size='16x16' style='display: none' )

  .charts
    .scripts

:javascript


  $(function(){

    $('#lindevModal').foundation('reveal', 'close');
    var scripts_loaded = false;
    var chart_counter = 0;

    var load_chart = function() {

      var chart_div = $("<div id=\"chart_"+chart_counter+"\">")[0];
      $("#lindevModal .charts").prepend(chart_div);
      var x_axis = $("#lindevModal .firstParam option:selected").val();
      var y_axis = $("#lindevModal .secondParam option:selected").val();
      var query_params = "experiment_id=#{@experiment.id}";

      query_params += "&param_x="+x_axis;
      query_params += "&param_y="+y_axis;
      query_params += "&chart_id="+chart_counter;

      var url = "#{@prefix}/chart_instances/lindev?"+query_params;

      var handler = function(data) {
        $("#busy_lindev").hide();
        var targetOffset = $(chart_div).offset().top;
        $('html,body').animate({ scrollTop: targetOffset }, 1000);
        $(chart_div).html(data);
      };
      getWithSession(url, {}, handler, onErrorHandler);
      chart_counter++;

    };

    $("#lindevModal").find("button").bind("click", function() {
      $("#busy_lindev").show();
      if(!scripts_loaded) {
        var url = "#{@prefix}/script_tags/lindev?base_url=" + encodeURIComponent("#{@prefix}");
        var handler = function(data) {

          scripts_loaded = true;
          $("#lindevModal").find(".scripts").html(data);
          load_chart();
        };
        getWithSession(url, {}, handler);
      }
      else
        load_chart();
    });
  });