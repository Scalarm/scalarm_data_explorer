=define_helper_functions

- parameters = @experiment.get_parameter_ids
-# parameters = %w(a b)
- parameters_labels = parameters


- #experiment_id = params[:id].to_s
- #experiment = Scalarm::Database::Model::Experiment.find_by_id(experiment_id)
- filter = {is_done: true, is_error: {'$exists'=> false}}
- fields = {fields: {result: 1}}
- result = @experiment.simulation_runs.where(filter, fields).first
- outputs=[]
- if result.blank?
  - outputs = ["No results found in completed simulation runs"]
- else
  - outputs = result.result.keys

%section#lindev_charts_form.panel.radius.analysis-chart
  %a.close-reveal-modal &#215
  %h3.subheader="Line charts with standard deviation"
  %h3 #{}
  .row
    .small-5.columns
      %label.inline="Select parameter on X"
    .small-7.columns
      %select(id="firstParam" class ="moes_params_list")
        %optgroup{:label => "Parameters"}
          -parameters.each do |parameter|
            %option{value:parameter} #{parameter}


        %optgroup{:label => "MoEs"}
          -outputs.each do |output|
            %option{value:output} #{output}

  .row
    .small-5.columns
      %label.inline="Select parameter on Y"
    .small-7.columns
      %select(id="secondParam" class ="moes_params_list")
        %optgroup{:label => "Parameters"}
          -parameters.each do |parameter|
            %option{value:parameter} #{parameter}


        %optgroup{:label => "MoEs"}
          -outputs.each do |output|
            %option{value:output} #{output}


  .row
    %ul.inline-list
      %li
        %button.refresh Refresh parameters
      %li
        %button.radius Load chart
      %li
        %a
          %img(src="#{image_url("loading.gif")}" class="loading_chart_gif" id='busy_lindev' size='16x16' style='display: none' )

.charts
  .scripts

:javascript


  $(function(){

    /* function from global variable moes_info_json create html selectbox with input parameter and moe values and then replacing exiting values with new ones */
    window.reload_lindev_params = function(){
      $("#busy_lindev").show();
      var new_select ="<optgroup label='Parameters'>";
      for (var iter in moes_info_json){
        var param = moes_info_json[iter];
        if (param.id == "delimiter")
            new_select = new_select +"</optgroup> <optgroup label='Moes'>";
          else
            new_select = new_select + "<option value='"+escapeHtml(param.id)+"'>"+escapeHtml(param.label)+"</option> ";
      }
      new_select = new_select +"</optgroup>";

      /* replace old values with new ones (moes) */
      $(".moes_params_list").each(function(){
        selected_option = $(this).find(":selected").val();
        $(this).html(new_select);
        $(this).find("option").filter(function(){
          return $(this).val() == selected_option
        }).attr('selected', true)
      });
      $('#busy_lindev').hide();
      toastr.success("Parameters refreshed");
    };
    reload_lindev_params();

    var chart_counter = 0;
    var load_chart = function() {

      var chart_div = $("<div id=\"chart_"+chart_counter+"\">")[0];
      $("#lindevModal .charts").prepend(chart_div);
      var x_axis = $("#lindevModal select#firstParam option:selected").val();
      var y_axis = $("#lindevModal select#secondParam option:selected").val();
      x_axis = escapeHtml(x_axis);
      y_axis = escapeHtml(y_axis);

      if (check_if_string_parameter(x_axis) == true || check_if_string_parameter(y_axis) == true) return;

      var query_params = "experiment_id=#{@experiment.id}";

      query_params += "&param_x="+x_axis;
      query_params += "&param_y="+y_axis;
      query_params += "&chart_id="+chart_counter;

      var url = "#{@prefix}/chart_instances/lindev?"+query_params;

      var handler = function(data) {
        $("#busy_lindev").hide();
        var targetOffset = $(chart_div).offset().top;
        $('html,body').animate({ scrollTop: targetOffset }, 1000);
        $(chart_div).html(data);
      };
      getWithSession(url, {}, handler, onErrorHandler);
      chart_counter++;

    };
    $("#lindevModal").find("button.refresh").bind("click", reload_lindev_params);

    $("#lindevModal").find("button.radius").bind("click", function() {
      $("#busy_lindev").show();
      load_chart();
    });

    function type_of_parameter(parameter) {
      var index_of_moe = window.moes_info.moes_names.indexOf(parameter)
      if (index_of_moe != -1) {
        return window.moes_info.moes_types[index_of_moe]
      }
      else {
        var index_of_input = window.moes_info.inputs_names.indexOf(parameter)
        return window.moes_info.inputs_types[index_of_input]
      }
    }

    function check_if_string_parameter(name_of_parameter) {
      if (type_of_parameter(name_of_parameter) == 'string') {
        toastr.error('Cannot plot for string type parameter - ' + name_of_parameter);
        $("#busy_lindev").hide();
        return true;
      }
    }

  });

